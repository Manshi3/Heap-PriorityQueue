You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.

Define a pair (u, v) which consists of one element from the first array and one element from the second array.

Return the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.

class Solution {
public:
    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k){
        vector<vector<int>> ans;
        priority_queue<pair<int, pair<int, int>>> maxH;
        for(int i = 0; i < nums1.size(); i++) {
            for(int j = 0; j < nums2.size(); j++) {
                int sum = nums1[i] + nums2[j];
                if(maxH.size() < k)maxH.push({sum, {nums1[i], nums2[j]}});
                else if(sum < maxH.top().first) {
                    maxH.pop();
                    maxH.push({sum, {nums1[i], nums2[j]}});
                }
            }
        }
        while(!maxH.empty()) {
            ans.push_back({maxH.top().second.first, maxH.top().second.second});
            maxH.pop();
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
};

GIVING ME TLE BUT IDC AT THIS POINT...IG....
